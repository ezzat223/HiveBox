name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout code
        uses: actions/checkout@v4
      - 
        name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - 
        name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.12.0'
      - 
        name: Install dependencies
        run: npm ci
      - 
        name: Lint code
        run: npm run lint

  docker:
    name: build and push docker image
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout code
        uses: actions/checkout@v4
      - 
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/hivebox-app
      - 
        name: Build and push Docker image
        # Only push the image if not in a pull request
        if: github.event_name != 'pull_request'  
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true  
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - 
        name: Build Docker image (PR)
        # Build the image for pull requests, but do not push
        if: github.event_name == 'pull_request'  
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false  # No push on pull request
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
    

  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - 
  #       name: Checkout code
  #       uses: actions/checkout@v4
  #     - 
  #       name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.12.0'
  #     - 
  #       name: Install dependencies
  #       run: npm install
  #     - 
  #       name: Run unit tests
  #       run: npm test
      # -
      #   name: Call /version endpoint and check response
      #   run: |
      #     VERSION=$(curl -s http://localhost:3000/version | jq -r .version)
      #     if [ "$VERSION" != "v0.0.1" ]; then
      #       echo "Version mismatch: expected v0.0.1, got $VERSION"
      #       exit 1
      #     fi


  scorecard: # https://github.com/ossf/scorecard-action#workflow-setup-required
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
    steps:
      - 
        name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - 
        name: OpenSSF Scorecard 
        uses: ossf/scorecard-action@0864cf19026789058feabb7e87baa5f140aac736
        with:
          results_file: results.sarif
          results_format: sarif
      - 
        name: "Upload to code-scanning"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # ----------------------- SonarQube ----------------------- #
  # sonarqube:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - 
  #     name: Checkout code
  #     uses: actions/checkout@v3
  #     with:
  #       # Disabling shallow clone is recommended for improving relevancy of reporting.
  #       fetch-depth: 0

  #   # Triggering SonarQube analysis as results of it are required by Quality Gate check.
  #   - 
  #     name: SonarQube Scan
  #     uses: sonarsource/sonarqube-scan-action@master
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  #   # Check the Quality Gate status.
  #   - 
  #     name: SonarQube Quality Gate check
  #     id: sonarqube-quality-gate-check
  #     uses: sonarsource/sonarqube-quality-gate-action@master
  #     # Force to fail step after specific time.
  #     timeout-minutes: 5
  #     env:
  #      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

  #   # Optionally you can use the output from the Quality Gate in another step.
  #   # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
  #   - 
  #     name: "Example show SonarQube Quality Gate Status value"
  #     run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }"

  semgrep:
    name: Scan
    runs-on: ubuntu-latest
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: returntocorp/semgrep
    if: (github.actor != 'dependabot[bot]')
    steps:
      - uses: actions/checkout@v4
      - run: semgrep ci